
== Hootenanny Installation Instructions

The following document describes how to install Hootenanny on an end user production machine running CentOS/RHEL.

The overarching goal with the Hootenanny installation process is to create a much simpler and automated process (e.g. RPM install) by which installs can be replicated.  Until that goal has been achieved, the following manual installation process must be completed using the specific order and dependencies listed below.  

== Overview

These installation instructions describe a complete Hootenanny installation process that has been validated in CentOS/RHEL 6.5. Any modifications to the versions and package dependencies listed in this document are not recommended.

The <<fullinstall, Full Install>> section of the document has been written for a clean install of Hootenanny. If a package has already been installed but does not match the expected version, your install will likely be unsupported. In such situations, the behavior of Hootenanny may range from inability to compile, to unexpected or severe runtime results that result in a failed install. 

Alternatively, a more fully automated install script for CentOS/RHEL and is now available at scripts/InstallHootDependencies-CentOS-RHEL-Full-EXPERIMENTAL.sh.  It has been tested on CentOS 6.6 and is meant to be a temporary solution until a Vagrant install can be created for Hootenanny on CentOS/RHEL.  If you want to 
install both the dependencies and application on CentOS/RHEL at once, you can use scripts/InstallHootDependenciesAndApplication-CentOS-RHEL-EXPERIMENTAL.sh.

== Prerequisites

=== Environment

* Hardware specs may vary. Hootenanny has been successfully installed on VMs. Some suggested specifications:
	** At least 8GB of RAM, but you can certainly run small datasets on far less.	
	** Quad core or greater Intel x86 64bit compatible processor
* An installation of CentOS/RHEL 6.5 64bit with a working yum repository or access to downloadable installable RPM's.
* A client machine with the Chrome (or Chromium) browser installed. Hootenanny is only supported in Chrome.

=== Dependencies
[[hoot-centos-deps]]

The following dependencies need to be installed from their relevant hosted locations:

* epel-release-6-8.noarch.rpm
* postgresql91-libs-9.1.11-1PGDG.rhel6.x86_64.rpm
* postgresql91-9.1.11-1PGDG.rhel6.x86_64.rpm
* postgresql91-server-9.1.11-1PGDG.rhel6.x86_64.rpm
* postgresql91-contrib-9.1.11-1PGDG.rhel6.x86_64.rpm
* postgresql91-devel-9.1.11-1PGDG.rhel6.x86_64.rpm
* liquibase-3.1.0-1.el6.noarch.rpm
* postgis2_91-2.0.4-1.rhel6.x86_64.rpm
* protobuf-2.4.1.tar.bz2 

The following dependencies need to be compiled from source from their relevant hosted locations and the installed:

* opencv-2.4.5.tar.gz
* geos-3.3.8-patched.tgz
* FileGDB_API_1_3-64.tar.gz
* gdal-1.10.1.tar.gz
* qt-everywhere-opensource-src-4.8.6.tar.gz
* cppunit-1.12.1.tar.gz
* apache-log4cxx-0.10.0.tar.gz
* proj-4.8.0.tar.gz
* stxxl-1.3.1.tar.gz (optional; optimizes Hootenany to use very large datasets)

Hootenanny is fairly sensitive to the dependency versions selected.  Selecting differing versions may result from anything to a completely successfull installation, to occasional conflation inaccuracies, to a compilation or runtime failure.  Vary from these dependency versions at your own risk. 

== Hootenanny Package Overview

The following instructions assumed you have used the Hootenanny build process to already have generated the following files:

* The Hootenanny core and UI source archive (hootenanny-X.Y.Z.tar.gz)
** The hoot core code is written in C++ and is to be packaged in a source archive (tar.gz) on a build machine during the release process. The source archive will be then compiled on the target installation machine.
** The hoot UI code is in Javascript and is packaged inside of the same source archive that the hoot core code is packaged in a directory named "hoot-id". The directory is to be manually copied to the web server on the target installation machine.
* The Hootenanny services web archive (hootenanny-services-X.Y.Z.war) files
** The hoot services code is in Java and is compiled on a build machine and packaged into a web archive (.war) file as a result of the release process. The war file is then deployed to the web server on the target installation machine.
* The FOUO translations archive (hootenanny-translations.tar.gz), which are only available through official channels.

== Installing an Update

If you are installing an update to a Hootenanny system that has previously been built with a full installation (all dependencies installed), you can skip directly to the section toward the end of this document entitled "Install Hootenanny".


