
== Hootenanny Installation Instructions

The following document describes how to install Hootenanny on an end user production machine running 
CentOS/RHEL.  A future goal for the Hootenanny installation process creating a much simpler 
and automated process (e.g. RPM install) by which installs can be replicated.  Until that goal has 
been achieved, the following manual installation process must be completed using the specific order 
and dependencies listed below.  

== Overview

These installation instructions describe a complete Hootenanny installation process that has been 
validated on CentOS/RHEL 6.5/6.6. Any modifications to the versions and package dependencies listed in 
this document are not recommended, as parts of Hootenanny are very sensitive to its software
dependency versions.

The <<fullinstall, Full Install>> section of the document has been written for a clean install of 
Hootenanny. If a package has already been installed but does not match the expected version, your 
install will likely be unsupported. In such situations, the behavior of Hootenanny may range from 
inability to compile, to unexpected or severe runtime results that result in a failed install. 

== Prerequisites

=== Environment

* Hardware specs may vary. Hootenanny has been successfully installed on VMs. Some suggested specifications:
	** At least 8GB of RAM, but you can certainly run small datasets on far less.	
	** Quad core or greater Intel x86 64bit compatible processor
* An installation of CentOS/RHEL 6.x 64bit with a working yum repository or access to downloadable installable RPM's.
* A client machine with the Chrome (or Chromium) browser installed. Hootenanny is only supported in Chrome.

== Hootenanny Package Overview

The following instructions assumed you have used the Hootenanny build process to already have generated the following files:

* The Hootenanny core and UI source archive (hootenanny-X.Y.Z.tar.gz)
** The hoot core code is written in C++ and is to be packaged in a source archive (tar.gz) on a build machine during the release process. The source archive will be then compiled on the target installation machine.
** The hoot UI code is in Javascript and is packaged inside of the same source archive that the hoot core code is packaged in a directory named "hoot-id". The directory is to be manually copied to the web server on the target installation machine.
* The Hootenanny services web archive (hootenanny-services-X.Y.Z.war) files
** The hoot services code is in Java and is compiled on a build machine and packaged into a web archive (.war) file as a result of the release process. The war file is then deployed to the web server on the target installation machine.
* The FOUO translations archive (hootenanny-translations.tar.gz), which are only available through official channels.


