pipeline {
    agent any
    parameters {
        booleanParam(name: 'Fail_step', defaultValue: false)
    }
    stages {
        stage("Setup") {
            steps {
                // Attempt to destroy exiting VM but don't stop job if not there
                sh "vagrant destroy -f ${params.Box} || true"
                // Make sure we have the tags info because figuring out the version is required in the build process
                sh '''
                    git fetch --tags
                    git submodule update --init
                    cp -R ../software.ubuntu1404 software
                '''
            }
        }
        // Need to expand this step to more robust static analysis scanning with SonarQube
        // and publish results
        stage("Static Analysis") {
            steps {
                sh 'cppcheck --enable=all --inconclusive --xml-version=2 --verbose --check-config . 2> cppcheck.xml'
            }
        }
        stage("License Header") {
            steps {
                script {
                    try {
                        sh '''
                            export HOOT_HOME=`pwd`
                            ./scripts/copyright/UpdateAllCopyrightHeaders.sh
                        '''
                    } catch (Exception e) {
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        stage("Vagrant Up") {
            steps {
                // NOTE: Only installs hoot build dependencies
                sh "vagrant up ${params.Box} --no-provision --provider aws"
            }       
        }
        stage("Core Tests") {
            when {
                expression { return params.Fail_step }
            }
            steps {
                script {
                    currentBuild.result = 'FAILURE'
                }
            }
        }
        stage("Services Tests") {
            steps {
                echo 'Service Tests'
            }
        }
        stage("UI Tests") {
            steps {
                echo 'UI Tests'
            }
        }
    }
    post {
        success {
            // If all tests passed, clean everything up
            sh "vagrant destroy -f ${params.Box}"
            cleanWs()
        }
        failure {
            script {
                // Check to see if we failed last time
                if (currentBuild.previousBuild.result == 'FAILURE') {
                    // Copy over any UI failure screenshots
                    emailext (
                        to: 'seth.putnam@digitalglobe.com',
                        subject: "Still Failing: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                        mimeType: 'text/html',
                        body: """<p>Failure: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                            <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""      
                    )
                }
            }
        }
        changed {
            script {
                // Job has been fixed
                if (currentBuild.currentResult == 'SUCCESS') {
                    emailext (
                        to: 'seth.putnam@digitalglobe.com',
                        subject: "Back to normal: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                        mimeType: 'text/html',
                        body: """<p>Fixed: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                            <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
                        )
                } else  if (currentBuild.currentResult == 'FAILURE') {
                    emailext (
                        to: 'seth.putnam@digitalglobe.com',
                        subject: "Failed: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                        mimeType: 'text/html',
                        body: """<p>Fixed: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                        <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
                        
                    )
                }
            }
        }
    }
}
