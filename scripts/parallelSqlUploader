#!/usr/bin/perl -w

use strict;
use threads;
use threads::shared;

sub sqlUploadWorker($$);
sub printLog($);

my @sqlFiles :shared;

sub printLog($)
{
  my $dateTimeString = `date "+%F %T"`;
  chomp( $dateTimeString );

  print( $dateTimeString . ' -- ' . shift(@_) );
}

sub sqlUploadWorker($$)
{
  my $dbName = shift(@_);
  my $threadNum = shift(@_);

  printLog( "Upload worker #$threadNum starting\n");

  my $currSqlFile;
  my $haveWork = 1;

  while ( $haveWork == 1 )
  {

    # Perl's equiv of scopelock, lock is dropped when reach end of scope where
    #   lock acquired, means it still works with exceptions being thrown
    {
      lock(@sqlFiles);
      if ( scalar(@sqlFiles) > 0 )
      {
        $currSqlFile = shift(@sqlFiles);
      }
      else
      {
        $haveWork = 0;
      }
    }

    if ( $haveWork == 0 )
    {
      printLog( "No more files for worker #$threadNum\n" );
      last;
    }

    chomp( $currSqlFile );

    printLog( "Upload worker #$threadNum is working $currSqlFile\n" );

    `psql -f $currSqlFile $dbName`;

    printLog( "Upload worker #$threadNum is done processing $currSqlFile\n" );
  }

  printLog( "Upload worker #$threadNum has completed, exiting\n" );
}

if ( scalar(@ARGV) != 3 )
{
  print( 'Usage: parallelSqlUploader <directory with SQL files> <dbname> ' .
    "<max concurrent uploads>\n\n" );
  exit;
}

my $dirName = shift(@ARGV);
my $dbName = shift(@ARGV);
my $maxThreads = shift(@ARGV);

if ( (! -e $dirName) || (! -d $dirName) )
{
  print( "Cannot access directory with SQL files: $dirName\n\n" );
  exit;
}

# List of SQL files to be worked is shared with/between worker threads
@sqlFiles = `ls -1 $dirName/*.sql`;

if ( scalar(@sqlFiles) == 0 )
{
  print( "Could not find any .sql files in $dirName\n\n" );
  exit;
}

foreach my $currFile ( @sqlFiles )
{
  chomp( $currFile );

  print( "Found SQL $currFile\n" );
}

my @threadHandles;
my $workerThreads = $maxThreads;

if ( scalar(@sqlFiles) < $workerThreads )
{
  $workerThreads = scalar(@sqlFiles);
}

my $i;
for ( $i = 0; $i < $workerThreads; ++$i )
{
  $threadHandles[$i] = threads->create(\&sqlUploadWorker, $dbName, $i + 1);
}

# Wait for all workers to come home
for ( $i = 0; $i < $workerThreads; ++$i )
{
  $threadHandles[$i]->join();
  printLog( 'Thread #' . ($i + 1) . " has completed and rejoined\n" );
}

printLog( "All threads rejoined cleanly, exiting\n" );

