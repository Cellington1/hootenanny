#!/usr/bin/perl -w

use strict;

# This script only specifies the target database name.
#
# Users are responsible for setting the following environment
# variables as needed to allow for connection to the correct
# host/database without requiring password prompts:
#
# PGUSER
# PGPASSWORD
# PGHOST
# PGPORT

sub parseSqlMax($);
sub calculateNextId($);

sub parseSqlMax($)
{
  my $returnString = shift(@_);

  my @returnLines = split( /\n/, $returnString );

  # If cmd was successful, should have last line indicating one data row
  if ( $returnLines[ scalar(@returnLines) - 1 ] ne '(1 row)' )
  {
    print( "Could not parse response $returnString\n\n" );
    exit;
  }

  my $maxId = int($returnLines[ scalar(@returnLines) - 2 ]);

  if ( $maxId < 1 )
  {
    print("Invalid value parsed from $returnString\n" );
    exit;
  }

  return $maxId;
}

sub calculateNextId($)
{
  my $maxId = shift(@_);
  my $adder;
  $adder = 10**(length($maxId) - 1);

  my $nextId = $maxId + $adder;

  while ( $nextId % $adder != 0 )
  {
    $nextId++;
  }

  return $nextId;

}

if ( scalar(@ARGV) != 1 ) 
{
  print( "Usage: getSqlIngestIdValues [dbname]\n\n");
  exit;
}

my $dbName = $ARGV[0];
my $psql = `which psql`;
chomp( $psql );

# Changeset ID
my $cmdReturn;
my $cmd;

my $optionString;

$cmd = "$psql -c \"SELECT MAX(id) FROM changesets;\" $dbName";
#print( "Cmd: $cmd\n" );
$cmdReturn = `$cmd`;
my $nextChangesetId = calculateNextId(parseSqlMax($cmdReturn));

$optionString .= " -D postgresql.dumpfile.writer.start.id.changeset=$nextChangesetId";

$cmd = "$psql -c \"SELECT MAX(id) FROM current_nodes;\" $dbName";
#print( "Cmd: $cmd\n" );
$cmdReturn = `$cmd`;
my $nextNodeId = calculateNextId(parseSqlMax($cmdReturn));
$optionString .= " -D postgresql.dumpfile.writer.start.id.node=$nextNodeId";

$cmd = "$psql -c \"SELECT MAX(id) FROM current_ways;\" $dbName";
#print( "Cmd: $cmd\n" );
$cmdReturn = `$cmd`;
my $nextWayId = calculateNextId(parseSqlMax($cmdReturn));
$optionString .= " -D postgresql.dumpfile.writer.start.id.way=$nextWayId";

$cmd = "$psql -c \"SELECT MAX(id) FROM current_relations;\" $dbName";
#print( "Cmd: $cmd\n" );
$cmdReturn = `$cmd`;
my $nextRelationId = calculateNextId(parseSqlMax($cmdReturn));
$optionString .= " -D postgresql.dumpfile.writer.start.id.relation=$nextRelationId";

print( "$optionString" );

